{
	"pathProgramming"      : "Programming",
	"pathProgrammingCycle" : "Programming.‚ü≥",
	
	"nameBlock"    : "Block",
	"defaultBlock" : "Description",
	"leafBlock"    : "Block",
	
	"nameIfThen"   : "If-then",
	"literalIf"    : "if",
	"literalThen"  : "then",
	"literalEndIf" : "end if",
	"leafIfThen"   : "If then",
	
	"nameIfThenElse" : "If-then-else",
	"literalElse"    : "else",
	"leafIfThenElse" : "If then else",
	
	"nameForTimes"  : "For-times",
	"literalFor"    : "for",
	"literalTimes"  : "times",
	"literalEndFor" : "end for",
	"leafForTimes"  : "Repeat for times",
	
	"nameForFromTo" : "For-from-to",
	"literalFrom"   : "from",
	"literalTo"     : "to",
	"literalStep"   : "step",
	"leafForFromTo" : "Repeat from to",
	
	"nameForIn" : "For-in",
	"literalIn" : "in",
	"leafForIn" : "Repeat for in",
	
	"nameCycle" : "Cycle",
	
	"nameWhile"       : "Repeat while",
	"literalWhile"    : "while",
	"literalEndWhile" : "end while",
	"leafWhile"       : "Repeat while",
	
	"nameUntil"    : "Repeat until",
	"literalDo"    : "do",
	"literalUntil" : "until",
	"leafUntil"    : "Repeat until",
	
	"nameConditional" : "Conditional",
	"leafConditional" : "Conditional",
	
	"nameComparativeSwitch" : "Comparative switch",
	"nameConditionalSwitch" : "Conditional switch",
	"literalSwitch"         : "switch",
	"literalWhen"           : "when",
	"literalEndSwitch"      : "end switch",
	"leafComparativeSwitch" : "Comparative switch",
	"leafConditionalSwitch" : "Conditional switch",
	
	"nameInvertedIf"     : "Inverted if",
	"operatorInvertedIf" : "if",
	"leafInvertedIf"     : "inverted if",
	"childrenInvertedIf" : [ "Action if condition is true", "Condition" ]
}
